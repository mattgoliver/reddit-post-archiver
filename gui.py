# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# pyuic5 -x test.ui -o new.py


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.uic import loadUi
from PyQt5.QtWidgets import QMainWindow, QApplication
import archiver
import json
import os


def read_secrets():
    with open("config.json", mode='r') as f:
        secrets = json.loads(f.read())

    return secrets


class Config_Check(QMainWindow):
    def __init__(self):
        super(Config_Check, self).__init__()
        loadUi("config_check.ui", self)
        widget.resize(445, 500)
        widget.setWindowTitle("RPA Config Check")

        # Display saved configurations if available
        if os.path.exists(os.path.join(".", "config.json")):
            secrets = read_secrets()

            self.baseDirectory.setText(secrets["DOWNLOAD_PATHS"]["base_directory"])
            self.dataDirectory.setText(secrets["DOWNLOAD_PATHS"]["data_directory"])
            self.client_id.setText(secrets["REDDIT_CREDENTIALS"]["client_id"])
            self.client_secret.setText(secrets["REDDIT_CREDENTIALS"]["client_secret"])
            self.username.setText(secrets["REDDIT_CREDENTIALS"]["username"])
            self.password.setPlaceholderText("*" * len(secrets["REDDIT_CREDENTIALS"]["password"]))
            self.user_agent.setText(secrets["REDDIT_CREDENTIALS"]["user_agent"])
            self.banned.setText(str(secrets["DOWNLOAD"]["banned_websites"]))

        self.doneButton.clicked.connect(self.save_config)

    def save_config(self, MainWindow):
        config = dict()
        config = {"DOWNLOAD_PATHS": {}, "REDDIT_CREDENTIALS": {}, "DOWNLOAD": {}}

        # Verify base directory exists
        if os.path.exists(self.baseDirectory.text()):
            base_directory = self.baseDirectory.text()
            config["DOWNLOAD_PATHS"]["base_directory"] = base_directory
        else:
            QtWidgets.QMessageBox.about(None, "Directory Error", "The given base directory does not exist!")
            return

        # Verify data directory exists
        if os.path.exists(self.dataDirectory.text()):
            data_directory = self.dataDirectory.text()
            config["DOWNLOAD_PATHS"]["data_directory"] = data_directory
        else:
            QtWidgets.QMessageBox.about(None, "Directory Error", "The given data directory does not exist!")
            return

        if self.password.text() == "":
            password = read_secrets()["REDDIT_CREDENTIALS"]["password"]
            config["REDDIT_CREDENTIALS"]["password"] = password
        else:
            config["REDDIT_CREDENTIALS"]["password"] = self.password.text()

        config["REDDIT_CREDENTIALS"]["client_id"] = self.client_id.text()
        config["REDDIT_CREDENTIALS"]["client_secret"] = self.client_secret.text()
        config["REDDIT_CREDENTIALS"]["username"] = self.username.text()
        config["REDDIT_CREDENTIALS"]["user_agent"] = self.user_agent.text()

        try:
            #reddit = archiver.initialize_reddit_connection(config)
            print("Bypassing Reddit auth to prevent spam during development.")
        except:
            QtWidgets.QMessageBox.about(None, "Reddit Authentication Error", "The provided Reddit credentials do not work, please check again.")
            return

        config["DOWNLOAD"]["banned_websites"] = self.banned.text()

        with open("config.json", "w") as config_file:
            json.dump(config, config_file, indent=2)

        main_menu = Main_Menu()
        widget.addWidget(main_menu)

        self.goToMainMenu()

    def goToMainMenu(self):
        widget.setCurrentIndex(widget.currentIndex()+1)


class Main_Menu(QMainWindow):
    def __init__(self):
        super(Main_Menu, self).__init__()
        loadUi("main_menu.ui", self)
        widget.setWindowTitle("RPA - Main Menu")


if __name__ == "__main__":
    import sys
    """app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.run(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())"""
    app = QApplication(sys.argv)
    widget = QtWidgets.QStackedWidget()
    config_check = Config_Check()
    widget.addWidget(config_check)
    widget.show()

    try:
        sys.exit(app.exec_())
    except:
        print("Exiting...")
